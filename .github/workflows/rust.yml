name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master, dev]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name : build

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build --verbose --release

  unittest:
    name: unit tests
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: install all fking compilers
      run: sudo apt install haskell-platform -y &&
          sudo apt install -y nodejs npm &&
          sudo npm install -g coffee-script &&
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 && 
          sudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/' &&
          sudo apt install r-base &&
          sudo apt install lua5.3 &&

          export CURRENT_BUILD_PATH=$(pwd)  &&
          echo $PATH &&
          rm -rf $HOME/golang &&
          rm -rf $HOME/gopath &&
          mkdir -p $HOME/golang # for GOROOT (contains the Go binary & core packages) &&
          mkdir -p $HOME/gopath # for GOPATH (contains code and external packages) &&
          curl http://storage.googleapis.com/golang/go1.5.2.linux-amd64.tar.gz 2>/dev/null > go1.5.2.linux-amd64.tar.gz &&
          tar -C $HOME/golang -xzf go1.5.2.linux-amd64.tar.gz &&
          export GOROOT=$HOME/golang/go &&
          export GOPATH=$HOME/gopath &&
          export PATH=$PATH:$GOROOT/bin &&
          export PATH=$PATH:$GOPATH/bin &&
          (if [[ "$(go version)" == *"go version go1.5"* ]]; then echo "âœ“ Go binary installed!"; else echo "Go binary not installed"; exit -1; fi); &&
          go version &&
          echo $PATH &&
          go env &&
          which go



    - name: Unit tests
      run: cargo test --features ignore_in_ci


  # e2etests:
  #   name: end-to-end tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: install vroom
  #       run: git clone https://github.com/google/vroom && cd vroom && python3 setup.py build && sudo python3 setup.py install && cd ..
  #     - name: install neovim
  #       run : python3 -m pip install -U neovim neovim-remote && sudo add-apt-repository ppa:neovim-ppa/stable -y  && sudo apt-get update -y && sudo apt-get install neovim -y
  #     - uses: actions/checkout@v2
  #     - name: compile sniprun
  #       run: ./install.sh 1
  #     - name: run vroom tests
  #       run : vroom --crawl --neovim -u plugin/sniprun.vim
  #
  #
  # 2nd try
  # vroom_end_to_end_tests:
  #   name: Vroom end to end tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v2

  #     - name: compile sniprun
  #       run: ./install.sh

  #     - name: workarounds
  #       run: export DISPLAY=:99.0 && sudo sh -e /etc/init.d/xvfb start

  #     - name: install neovim 
  #       run: sudo apt install neovim -y && sudo apt install python3-neovim

  #     - name: install vroom
  #       run: wget https://github.com/google/vroom/releases/download/v0.14.0/vroom_0.14.0-1_all.deb && sudo apt install ./vroom_0.14.0-1_all.deb -y 

  #     - name: run tests
  #       run: vroom --crawl --neovim -u plugin/sniprun.vim --servername=FOO 


  install:
    name: install (download)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Installation tests
      run: ./install.sh


 

  codecov:
    name : codecov
    runs-on: ubuntu-latest
    steps:
    - name : allow add cargo to path
      run: echo "ACTIONS_ALLOW_UNSECURE_COMMANDS=true" >> $GITHUB_ENV

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: install all fking compilers
      run: sudo apt install haskell-platform -y &&
          sudo apt install -y nodejs npm &&
          sudo npm install -g coffee-script &&
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 && 
          sudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/' &&
          sudo apt install r-base &&
          sudo apt install lua5.3

   

    - name: Code coverage
      uses: actions-rs/tarpaulin@v0.1.0
      with:
        args: --features ignore_in_ci -- --test-threads=1

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v1.0.2
      with:
          token: ${{secrets.CODECOV_TOKEN}}


